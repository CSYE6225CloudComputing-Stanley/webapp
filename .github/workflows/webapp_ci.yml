name: Webapp CI & Packer Image Build

on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, closed]

jobs:
  webapp-test:
    if: ${{ github.event.action != 'closed' }}
    runs-on: ubuntu-latest

    env:
      DB_HOST: 127.0.0.1
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 --silent" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to start..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "MySQL is unavailable - sleeping"
            sleep 2
          done

      - name: Run Unit test and Integration Tests
        run: mvn clean test

  build-artifact:
    if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    env:
      DB_HOST: 127.0.0.1
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 --silent" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to start..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "MySQL is unavailable - sleeping"
            sleep 2
          done

      - name: Run Test and Build artifact 
        run: |
          mvn clean package
          mv target/*.jar target/webapp.jar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: target/webapp.jar

  packer-build:
    if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    needs: [build-artifact]

    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: packer/artifacts

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}  
          export_default_credentials: true

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 'latest'

      - name: Initialize Packer
        run: |
          cd packer
          packer init .

      - name: Build Machine Image
        run: |
          cd packer
          packer build \
            -var-file=dev.pkrvars.hcl \
            -var "DB_NAME=${DB_NAME}" \
            -var "DB_USERNAME=${DB_USERNAME}" \
            -var "DB_PASSWORD=${DB_PASSWORD}" \
            .